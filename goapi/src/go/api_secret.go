/*
 * Secret Server
 *
 * This is an API of a secret service. You can save your secret by using the API. You can restrict the access of a secret after the certen number of views or after a certen period of time.
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"encoding/json"
	"fmt"
	"net/http"
	"strings"
	"time"

	"github.com/dchest/uniuri"
)

type secretText struct {
	Text string `json:"secretText"`
}

var (
	CIPHER_KEY = []byte("0123456789012345")
)

func AddSecret(w http.ResponseWriter, r *http.Request) {

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
	//token := jwt.New(jwt.SigningMethodHS256)
	txt := secretText{}
	err := json.NewDecoder(r.Body).Decode(&txt)
	if err != nil {
		http.Error(w, err.Error(), 500)
		return
	}
	encryptText, err := Encrypt(CIPHER_KEY, txt.Text)
	if err != nil {
		http.Error(w, err.Error(), 500)
		return
	}
	hash := uniuri.New()

	scret := &Secret{
		Hash:           hash,
		SecretText:     encryptText,
		ExpiresAt:      time.Now().Local().Add(24 * time.Hour),
		RemainingViews: 0,
	}

	err = Add(scret)

	if err != nil {
		http.Error(w, err.Error(), 500)
		return
	}

	w.Write([]byte(hash))
}

func GetSecretByHash(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	w.WriteHeader(http.StatusOK)

	params := strings.Replace(r.URL.Path, "/v1/secret/", "", -1)

	fmt.Println(params)

}
